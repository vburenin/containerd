package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCommitImageParams creates a new CommitImageParams object
// with the default values initialized.
func NewCommitImageParams() *CommitImageParams {
	var ()
	return &CommitImageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCommitImageParamsWithTimeout creates a new CommitImageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCommitImageParamsWithTimeout(timeout time.Duration) *CommitImageParams {
	var ()
	return &CommitImageParams{

		timeout: timeout,
	}
}

// NewCommitImageParamsWithContext creates a new CommitImageParams object
// with the default values initialized, and the ability to set a context for a request
func NewCommitImageParamsWithContext(ctx context.Context) *CommitImageParams {
	var ()
	return &CommitImageParams{

		Context: ctx,
	}
}

// NewCommitImageParamsWithHTTPClient creates a new CommitImageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCommitImageParamsWithHTTPClient(client *http.Client) *CommitImageParams {
	var ()
	return &CommitImageParams{
		HTTPClient: client,
	}
}

/*CommitImageParams contains all the parameters to send to the API endpoint
for the commit image operation typically these are written to a http.Request
*/
type CommitImageParams struct {

	/*NewID*/
	NewID string
	/*OldID*/
	OldID string
	/*StoreName*/
	StoreName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the commit image params
func (o *CommitImageParams) WithTimeout(timeout time.Duration) *CommitImageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the commit image params
func (o *CommitImageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the commit image params
func (o *CommitImageParams) WithContext(ctx context.Context) *CommitImageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the commit image params
func (o *CommitImageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the commit image params
func (o *CommitImageParams) WithHTTPClient(client *http.Client) *CommitImageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the commit image params
func (o *CommitImageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNewID adds the newID to the commit image params
func (o *CommitImageParams) WithNewID(newID string) *CommitImageParams {
	o.SetNewID(newID)
	return o
}

// SetNewID adds the newId to the commit image params
func (o *CommitImageParams) SetNewID(newID string) {
	o.NewID = newID
}

// WithOldID adds the oldID to the commit image params
func (o *CommitImageParams) WithOldID(oldID string) *CommitImageParams {
	o.SetOldID(oldID)
	return o
}

// SetOldID adds the oldId to the commit image params
func (o *CommitImageParams) SetOldID(oldID string) {
	o.OldID = oldID
}

// WithStoreName adds the storeName to the commit image params
func (o *CommitImageParams) WithStoreName(storeName string) *CommitImageParams {
	o.SetStoreName(storeName)
	return o
}

// SetStoreName adds the storeName to the commit image params
func (o *CommitImageParams) SetStoreName(storeName string) {
	o.StoreName = storeName
}

// WriteToRequest writes these params to a swagger request
func (o *CommitImageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param new_id
	qrNewID := o.NewID
	qNewID := qrNewID
	if qNewID != "" {
		if err := r.SetQueryParam("new_id", qNewID); err != nil {
			return err
		}
	}

	// query param old_id
	qrOldID := o.OldID
	qOldID := qrOldID
	if qOldID != "" {
		if err := r.SetQueryParam("old_id", qOldID); err != nil {
			return err
		}
	}

	// path param store_name
	if err := r.SetPathParam("store_name", o.StoreName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
