package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/containerd/containerd/plapi/models"
)

// CommitImageReader is a Reader for the CommitImage structure.
type CommitImageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CommitImageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewCommitImageCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewCommitImageDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCommitImageCreated creates a CommitImageCreated with default headers values
func NewCommitImageCreated() *CommitImageCreated {
	return &CommitImageCreated{}
}

/*CommitImageCreated handles this case with default header values.

Image successfully committed
*/
type CommitImageCreated struct {
	Payload string
}

func (o *CommitImageCreated) Error() string {
	return fmt.Sprintf("[PUT /snapshot/{store_name}][%d] commitImageCreated  %+v", 201, o.Payload)
}

func (o *CommitImageCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommitImageDefault creates a CommitImageDefault with default headers values
func NewCommitImageDefault(code int) *CommitImageDefault {
	return &CommitImageDefault{
		_statusCode: code,
	}
}

/*CommitImageDefault handles this case with default header values.

error
*/
type CommitImageDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the commit image default response
func (o *CommitImageDefault) Code() int {
	return o._statusCode
}

func (o *CommitImageDefault) Error() string {
	return fmt.Sprintf("[PUT /snapshot/{store_name}][%d] CommitImage default  %+v", o._statusCode, o.Payload)
}

func (o *CommitImageDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
