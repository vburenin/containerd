package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/containerd/containerd/plapi/models"
)

// ListAllImagesReader is a Reader for the ListAllImages structure.
type ListAllImagesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAllImagesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListAllImagesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewListAllImagesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewListAllImagesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListAllImagesOK creates a ListAllImagesOK with default headers values
func NewListAllImagesOK() *ListAllImagesOK {
	return &ListAllImagesOK{}
}

/*ListAllImagesOK handles this case with default header values.

OK
*/
type ListAllImagesOK struct {
	Payload []*models.Image
}

func (o *ListAllImagesOK) Error() string {
	return fmt.Sprintf("[GET /snapshot/{store_name}][%d] listAllImagesOK  %+v", 200, o.Payload)
}

func (o *ListAllImagesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAllImagesNotFound creates a ListAllImagesNotFound with default headers values
func NewListAllImagesNotFound() *ListAllImagesNotFound {
	return &ListAllImagesNotFound{}
}

/*ListAllImagesNotFound handles this case with default header values.

Not found
*/
type ListAllImagesNotFound struct {
	Payload *models.Error
}

func (o *ListAllImagesNotFound) Error() string {
	return fmt.Sprintf("[GET /snapshot/{store_name}][%d] listAllImagesNotFound  %+v", 404, o.Payload)
}

func (o *ListAllImagesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAllImagesDefault creates a ListAllImagesDefault with default headers values
func NewListAllImagesDefault(code int) *ListAllImagesDefault {
	return &ListAllImagesDefault{
		_statusCode: code,
	}
}

/*ListAllImagesDefault handles this case with default header values.

error
*/
type ListAllImagesDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the list all images default response
func (o *ListAllImagesDefault) Code() int {
	return o._statusCode
}

func (o *ListAllImagesDefault) Error() string {
	return fmt.Sprintf("[GET /snapshot/{store_name}][%d] ListAllImages default  %+v", o._statusCode, o.Payload)
}

func (o *ListAllImagesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
