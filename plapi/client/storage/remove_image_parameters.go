package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRemoveImageParams creates a new RemoveImageParams object
// with the default values initialized.
func NewRemoveImageParams() *RemoveImageParams {
	var ()
	return &RemoveImageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRemoveImageParamsWithTimeout creates a new RemoveImageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRemoveImageParamsWithTimeout(timeout time.Duration) *RemoveImageParams {
	var ()
	return &RemoveImageParams{

		timeout: timeout,
	}
}

// NewRemoveImageParamsWithContext creates a new RemoveImageParams object
// with the default values initialized, and the ability to set a context for a request
func NewRemoveImageParamsWithContext(ctx context.Context) *RemoveImageParams {
	var ()
	return &RemoveImageParams{

		Context: ctx,
	}
}

// NewRemoveImageParamsWithHTTPClient creates a new RemoveImageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRemoveImageParamsWithHTTPClient(client *http.Client) *RemoveImageParams {
	var ()
	return &RemoveImageParams{
		HTTPClient: client,
	}
}

/*RemoveImageParams contains all the parameters to send to the API endpoint
for the remove image operation typically these are written to a http.Request
*/
type RemoveImageParams struct {

	/*ImageID*/
	ImageID string
	/*StoreName*/
	StoreName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the remove image params
func (o *RemoveImageParams) WithTimeout(timeout time.Duration) *RemoveImageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the remove image params
func (o *RemoveImageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the remove image params
func (o *RemoveImageParams) WithContext(ctx context.Context) *RemoveImageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the remove image params
func (o *RemoveImageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the remove image params
func (o *RemoveImageParams) WithHTTPClient(client *http.Client) *RemoveImageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the remove image params
func (o *RemoveImageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithImageID adds the imageID to the remove image params
func (o *RemoveImageParams) WithImageID(imageID string) *RemoveImageParams {
	o.SetImageID(imageID)
	return o
}

// SetImageID adds the imageId to the remove image params
func (o *RemoveImageParams) SetImageID(imageID string) {
	o.ImageID = imageID
}

// WithStoreName adds the storeName to the remove image params
func (o *RemoveImageParams) WithStoreName(storeName string) *RemoveImageParams {
	o.SetStoreName(storeName)
	return o
}

// SetStoreName adds the storeName to the remove image params
func (o *RemoveImageParams) SetStoreName(storeName string) {
	o.StoreName = storeName
}

// WriteToRequest writes these params to a swagger request
func (o *RemoveImageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param image_id
	qrImageID := o.ImageID
	qImageID := qrImageID
	if qImageID != "" {
		if err := r.SetQueryParam("image_id", qImageID); err != nil {
			return err
		}
	}

	// path param store_name
	if err := r.SetPathParam("store_name", o.StoreName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
