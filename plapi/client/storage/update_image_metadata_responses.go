package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/containerd/containerd/plapi/models"
)

// UpdateImageMetadataReader is a Reader for the UpdateImageMetadata structure.
type UpdateImageMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateImageMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateImageMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewUpdateImageMetadataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateImageMetadataDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateImageMetadataOK creates a UpdateImageMetadataOK with default headers values
func NewUpdateImageMetadataOK() *UpdateImageMetadataOK {
	return &UpdateImageMetadataOK{}
}

/*UpdateImageMetadataOK handles this case with default header values.

OK
*/
type UpdateImageMetadataOK struct {
}

func (o *UpdateImageMetadataOK) Error() string {
	return fmt.Sprintf("[PUT /metadata/{store_name}][%d] updateImageMetadataOK ", 200)
}

func (o *UpdateImageMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateImageMetadataNotFound creates a UpdateImageMetadataNotFound with default headers values
func NewUpdateImageMetadataNotFound() *UpdateImageMetadataNotFound {
	return &UpdateImageMetadataNotFound{}
}

/*UpdateImageMetadataNotFound handles this case with default header values.

Not found
*/
type UpdateImageMetadataNotFound struct {
	Payload *models.Error
}

func (o *UpdateImageMetadataNotFound) Error() string {
	return fmt.Sprintf("[PUT /metadata/{store_name}][%d] updateImageMetadataNotFound  %+v", 404, o.Payload)
}

func (o *UpdateImageMetadataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateImageMetadataDefault creates a UpdateImageMetadataDefault with default headers values
func NewUpdateImageMetadataDefault(code int) *UpdateImageMetadataDefault {
	return &UpdateImageMetadataDefault{
		_statusCode: code,
	}
}

/*UpdateImageMetadataDefault handles this case with default header values.

error
*/
type UpdateImageMetadataDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the update image metadata default response
func (o *UpdateImageMetadataDefault) Code() int {
	return o._statusCode
}

func (o *UpdateImageMetadataDefault) Error() string {
	return fmt.Sprintf("[PUT /metadata/{store_name}][%d] UpdateImageMetadata default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateImageMetadataDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
